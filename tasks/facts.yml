---
- name: "Set pihole install path"
  stat:
    path: "{{ pihole_executable_path }}"
  register: pihole_binary

- name: "Set pihole install state"
  set_fact:
    pihole_installed: "{{ pihole_binary.stat.exists | default(false) }}"

- name: "Is lighty-enable-mod present"
  shell: "which {{ pihole_lighttpd_mod_manager }}"
  register: pihole_lighttpd_enable_mod_path
  check_mode: no
  args:
    warn: false

- name: "Set enable lighttpd modules"
  set_fact:
    pihole_lighttpd_enable_modules: true
  when:
    - pihole_lighttpd_enable_mod_path.rc == 0

- name: "Set default interface for pihole_listen_interface"
  set_fact:
    pihole_listen_interface: "{{ hostvars[inventory_hostname]['ansible_default_ipv4'].interface }}"
  when:
    - pihole_listen_interface is not defined
    - "'ansible_default_ipv4' in hostvars[inventory_hostname]"

- name: "Set default ip address for pihole_listen_address"
  set_fact:
    pihole_listen_address_ipv4: "{{ hostvars[inventory_hostname]['ansible_default_ipv4'].address }}"
  when:
    - pihole_listen_address_ipv4 is not defined
    - "'ansible_default_ipv4' in hostvars[inventory_hostname]"

- name: "Set default netmask for pihole_listen_netmask_ipv4"
  set_fact:
    pihole_listen_netmask_ipv4: "{{ hostvars[inventory_hostname]['ansible_default_ipv4'].netmask }}"
  when:
    - pihole_listen_netmask_ipv4 is not defined
    - "'ansible_default_ipv4' in hostvars[inventory_hostname]"

- name: "Set default gateway"
  set_fact:
    pihole_gateway_ipv4: "{{ hostvars[inventory_hostname]['ansible_default_ipv4'].gateway }}"
  when:
    - pihole_gateway_ipv4 is not defined
    - "'ansible_default_ipv4' in hostvars[inventory_hostname]"

- name: "Calculate the CIDR for pihole_listen_address_ipv4"
  set_fact:
    pihole_listen_cidr_ipv4: "{{ (pihole_listen_address_ipv4+'/'+pihole_listen_netmask_ipv4)| ipaddr('prefix') }}"
  when:
    - pihole_listen_cidr_ipv4 is not defined

- name: "Set default ipv6 address for pihole_listen_address"
  set_fact:
    pihole_listen_address_ipv6: "{{ hostvars[inventory_hostname]['ansible_default_ipv6'].address }}"
  when:
    - pihole_listen_address_ipv6 is not defined
    - "'ansible_default_ipv6' in hostvars[inventory_hostname]"

- name: "Set dhcp client service path"
  stat:
    path: "/etc/init.d/{{ pihole_dhcpd_service_name }}"
  register: dhcpd_service_file

- name: "Check whether dhcp client needs to be disabled"
  set_fact:
    dhcpd_service_present: "{{ dhcpd_service_file.stat.exists | default(false) }}"

- name: "Set dhcp config file state"
  stat:
    path: "{{ dhcpd_config_path }}"
  register: dhcpd_config_file

- name: "Check whether dhcpd config file can be patched"
  set_fact:
    dhcpd_config_present: "{{ dhcpd_config_file.stat.exists | default(false) }}"

- name: 'See if we can install iproute2'
  shell: apt-get install --dry-run iproute2
  register: can_install_iproute2
  check_mode: no
  args:
    warn: false
  when:
    - ansible_os_family == 'Debian'
    - ansible_distribution_major_version >= 7

- name: "Check which iproute package should be installed"
  set_fact:
    pihole_iproute_package_name: "iproute2"
  when:
    - ansible_os_family == 'Debian'
    - can_install_iproute2

# Check to see which version of PHP will be installed
- name: 'See if we can install PHP'
  shell: apt-get install --dry-run php
  register: can_install_php
  check_mode: no
  args:
    warn: false
  when:
    - ansible_os_family == 'Debian'
    - ansible_distribution_major_version >= 7

# Check to see which version of SQLite will be installed
- name: 'See if we can install sqlite3'
  shell: apt-get install --dry-run php-sqlite3
  register: can_install_sqlite3
  check_mode: no
  args:
    warn: false
  when:
    - ansible_os_family == 'Debian'
    - ansible_distribution_major_version >= 7
    - can_install_php.rc == 0

- name: "Set man8 Directory"
  set_fact:
    man8_directory: "/usr/local/share/man/man8"

- name: "Set man5 Directory"
  set_fact:
    man5_directory: "/usr/local/share/man/man5"

- name: "Set Update Sources Random Minute"
  set_fact:
    pihole_source_rand_minute: "{{ 59 |random(seed=inventory_hostname) }}"

- name: "Set Update Sources Random Hour"
  set_fact:
    pihole_source_rand_hour: "{{ 3 |random(seed=inventory_hostname) }}"

- name: "Set Update Version Check Random Minute"
  set_fact:
    pihole_version_rand_minute: "{{ 59 |random(seed=inventory_hostname) }}"

- name: "Set Update Version Check Random Hour"
  set_fact:
    pihole_version_rand_hour: "{{ 3 |random(seed=inventory_hostname) }}"

- name: Get Latest Tag URL
  uri:
    url: https://github.com/pi-hole/FTL/releases/latest
    method: HEAD
  register: latest_tag_url

# - debug: var=latest_tag_url

- name: Parse Latest version
  shell: "echo {{ latest_tag_url.url }} | awk -F '/' '{print $NF}'"
  register: latest_tag_result

- name: Set Latest version
  set_fact:
    latest_tag: "{{ latest_tag_result.stdout }}"

## TODO architecture detection for FTL binary for now, just hard code to x86_64
- name: Set FTL Architecture
  set_fact:
    # pihole_ftl_architecture: 'pihole-FTL-linux-x86_32'
    pihole_ftl_architecture: 'pihole-FTL-linux-x86_64'
  # register:

- name: Set full url for FTL
  set_fact:
    pihole_ftl_url: "{{ pihole_ftl_base_url }}{{ latest_tag }}/{{pihole_ftl_architecture}}"

- debug: var=pihole_ftl_url

- name: Set Lighttpd Config file
  set_fact:
    pihole_lighttpd_config_file: 'lighttpd.conf.fedora'
  when:
    - ansible_os_family == 'Fedora'

- name: "Set dhcp client service path"
  stat:
    path: "/etc/init.d/{{ pihole_dhcpd_service_name }}"
  register: dhcpd_service_file

- name: "Check whether dhcp client needs to be disabled"
  set_fact:
    dhcpd_service_present: "{{ dhcpd_service_file.stat.exists | default(false) }}"

- name: Checking whether defaults need to be removed
  stat:
    path: "{{ item }}"
    get_checksum: no
  with_items: "{{ pihole_default_pages }}"
  register: pihole_remove_pages_found

- name: Build a list of all the security group names.
  set_fact:
    pihole_remove_pages: "{{ pihole_remove_pages_found | json_query('results[*].stat.path') }}"

